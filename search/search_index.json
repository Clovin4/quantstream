{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"QuantStream","text":"<p>Welcome to the QuantStream documentation. QuantStream is a Python-based platform for financial modeling with support for real-time data and integration with APIs like the Financial Modeling Prep API.</p> <pre><code>fmp = qs.FinancialModelingPrep()\n</code></pre>"},{"location":"reference/quantstream_connectors/","title":"QuantStream Connectors API Reference","text":"<p>This reference</p> <p>A module for initializing connectors. Using this module, you can import various connectors to access different data sources.</p>"},{"location":"reference/quantstream_connectors/#data-modeling","title":"Data Modeling","text":""},{"location":"reference/quantstream_connectors/#quantstream.connectors.data_modeling.FinDataset","title":"<code>FinDataset</code>","text":"<p>               Bases: <code>Dataset</code></p> <p>summary</p> <p>Parameters:</p> Name Type Description Default <code>xr</code> <code>_type_</code> <p>description</p> required <p>Raises:</p> Type Description <code>KeyError</code> <p>description</p> <p>Returns:</p> Name Type Description <code>_type_</code> <p>description</p> Source code in <code>quantstream/connectors/data_modeling.py</code> <pre><code>class FinDataset(xr.Dataset):\n    \"\"\"_summary_\n\n    Args:\n        xr (_type_): _description_\n\n    Raises:\n        KeyError: _description_\n\n    Returns:\n        _type_: _description_\n    \"\"\"\n\n    __slots__ = ()\n\n    def __init__(\n        self,\n        data_vars=None,\n        coords=None,\n        attrs=None,\n    ):\n        super().__init__(data_vars, coords, attrs)\n\n    @property\n    def name(self):\n        \"\"\"\n        str: The name of the dataset.\n        \"\"\"\n        return self.attrs.get(\"name\")\n\n    @name.setter\n    def name(self, value):\n        self.attrs[\"name\"] = value\n\n    @classmethod\n    def from_json(cls, data):\n        \"\"\"_summary_\n\n        Args:\n            data (_type_): _description_\n\n        Raises:\n            KeyError: _description_\n\n        Returns:\n            _type_: _description_\n        \"\"\"\n        cols = data[0].keys()\n\n        raw_data = {col: [row[col] for row in data] for col in cols}\n\n        if \"date\" in raw_data:\n            index = np.array(raw_data.pop(\"date\"), dtype=\"datetime64\")\n        elif \"timestamp\" in raw_data:\n            index = np.array(raw_data.pop(\"timestamp\"), dtype=\"datetime64\")\n        else:\n            raise KeyError(\"No date or timestamp column found in data.\")\n\n        data_vars = {\n            col: xr.DataArray(raw_data[col], dims=\"time\", coords={\"time\": index})\n            for col in raw_data.keys()\n        }\n\n        return cls(data_vars)\n\n    def plot_candlestick(self):\n        \"\"\"\n        Plot a candlestick chart.\n        \"\"\"\n\n        mpf.plot(\n            self.to_pandas(),\n            type=\"candle\",\n            style=\"charles\",\n            volume=True,\n            ylabel=\"Price\",\n            ylabel_lower=\"Shares\\nTraded\",\n        )\n</code></pre>"},{"location":"reference/quantstream_connectors/#quantstream.connectors.data_modeling.FinDataset.name","title":"<code>name</code>  <code>property</code> <code>writable</code>","text":"<p>str: The name of the dataset.</p>"},{"location":"reference/quantstream_connectors/#quantstream.connectors.data_modeling.FinDataset.from_json","title":"<code>from_json(data)</code>  <code>classmethod</code>","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>_type_</code> <p>description</p> required <p>Raises:</p> Type Description <code>KeyError</code> <p>description</p> <p>Returns:</p> Name Type Description <code>_type_</code> <p>description</p> Source code in <code>quantstream/connectors/data_modeling.py</code> <pre><code>@classmethod\ndef from_json(cls, data):\n    \"\"\"_summary_\n\n    Args:\n        data (_type_): _description_\n\n    Raises:\n        KeyError: _description_\n\n    Returns:\n        _type_: _description_\n    \"\"\"\n    cols = data[0].keys()\n\n    raw_data = {col: [row[col] for row in data] for col in cols}\n\n    if \"date\" in raw_data:\n        index = np.array(raw_data.pop(\"date\"), dtype=\"datetime64\")\n    elif \"timestamp\" in raw_data:\n        index = np.array(raw_data.pop(\"timestamp\"), dtype=\"datetime64\")\n    else:\n        raise KeyError(\"No date or timestamp column found in data.\")\n\n    data_vars = {\n        col: xr.DataArray(raw_data[col], dims=\"time\", coords={\"time\": index})\n        for col in raw_data.keys()\n    }\n\n    return cls(data_vars)\n</code></pre>"},{"location":"reference/quantstream_connectors/#quantstream.connectors.data_modeling.FinDataset.plot_candlestick","title":"<code>plot_candlestick()</code>","text":"<p>Plot a candlestick chart.</p> Source code in <code>quantstream/connectors/data_modeling.py</code> <pre><code>def plot_candlestick(self):\n    \"\"\"\n    Plot a candlestick chart.\n    \"\"\"\n\n    mpf.plot(\n        self.to_pandas(),\n        type=\"candle\",\n        style=\"charles\",\n        volume=True,\n        ylabel=\"Price\",\n        ylabel_lower=\"Shares\\nTraded\",\n    )\n</code></pre>"},{"location":"reference/quantstream_connectors/#fmp-connector","title":"FMP Connector","text":""},{"location":"reference/quantstream_connectors/#quantstream.connectors.fmp_connector.FinancialModelingPrep","title":"<code>FinancialModelingPrep</code>","text":"<p>summary</p> Source code in <code>quantstream/connectors/fmp_connector.py</code> <pre><code>class FinancialModelingPrep:\n    \"\"\"_summary_\"\"\"\n\n    def __init__(self, api_key: str = None):\n        if not api_key or not isinstance(api_key, str):\n            api_key = os.getenv(\"FMP_API_KEY\")\n            if not api_key:\n                raise ValueError(\n                    \"The FMP API key must be provided \"\n                    \"either through the key parameter or \"\n                    \"through the environment variable \"\n                    \"FMP_API_KEY. Get a free key \"\n                    \"from the financialmodelingprep website: \"\n                    \"https://financialmodelingprep.com/developer/docs/\"\n                )\n            logging.info(\"FMP API key loaded from environment variable.\")\n        self.api_key = api_key\n\n    def get_quote(self, symbol):\n        \"\"\"_summary_\n\n        Args:\n            symbol (_type_): _description_\n\n        Returns:\n            _type_: _description_\n        \"\"\"\n        response = quote(self.api_key, symbol)\n        return response\n\n    def get_daily(\n        self,\n        symbol: str,\n        from_date: Optional[date] = None,\n        to_date: Optional[date] = None,\n    ) -&gt; FinDataset:\n        \"\"\"\n        Fetch daily financial data for a given symbol.\n\n        Args:\n            symbol (str): The stock symbol to fetch data for.\n            from_date (date, optional): Start date for the data range.\n            to_date (date, optional): End date for the data range.\n\n        Returns:\n            FinDataset: A dataset containing the daily financial data.\n\n        Raises:\n            ValueError: If the symbol is invalid or dates are in incorrect format.\n        \"\"\"\n        if not symbol or not isinstance(symbol, str):\n            raise ValueError(\"Invalid symbol provided\")\n\n        try:\n            logging.info(f\"Fetching daily data for {symbol}\")\n            response = daily(self.api_key, symbol, from_date, to_date)\n            return FinDataset.from_json(response)\n        except Exception as e:\n            logging.error(f\"Error fetching daily data for {symbol}: {str(e)}\")\n            raise\n\n    def get_intraday(\n        self, symbol, time_delta, from_date, to_date, time_series=None\n    ) -&gt; FinDataset:\n        response = intraday(\n            self.api_key, symbol, time_delta, from_date, to_date, time_series\n        )\n        ds = FinDataset.from_json(response)\n        ds.attrs[\"time_delta\"] = time_delta\n        ds.attrs[\"from_date\"] = from_date\n        ds.attrs[\"to_date\"] = to_date\n\n        return ds\n</code></pre>"},{"location":"reference/quantstream_connectors/#quantstream.connectors.fmp_connector.FinancialModelingPrep.get_daily","title":"<code>get_daily(symbol, from_date=None, to_date=None)</code>","text":"<p>Fetch daily financial data for a given symbol.</p> <p>Parameters:</p> Name Type Description Default <code>symbol</code> <code>str</code> <p>The stock symbol to fetch data for.</p> required <code>from_date</code> <code>date</code> <p>Start date for the data range.</p> <code>None</code> <code>to_date</code> <code>date</code> <p>End date for the data range.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>FinDataset</code> <code>FinDataset</code> <p>A dataset containing the daily financial data.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the symbol is invalid or dates are in incorrect format.</p> Source code in <code>quantstream/connectors/fmp_connector.py</code> <pre><code>def get_daily(\n    self,\n    symbol: str,\n    from_date: Optional[date] = None,\n    to_date: Optional[date] = None,\n) -&gt; FinDataset:\n    \"\"\"\n    Fetch daily financial data for a given symbol.\n\n    Args:\n        symbol (str): The stock symbol to fetch data for.\n        from_date (date, optional): Start date for the data range.\n        to_date (date, optional): End date for the data range.\n\n    Returns:\n        FinDataset: A dataset containing the daily financial data.\n\n    Raises:\n        ValueError: If the symbol is invalid or dates are in incorrect format.\n    \"\"\"\n    if not symbol or not isinstance(symbol, str):\n        raise ValueError(\"Invalid symbol provided\")\n\n    try:\n        logging.info(f\"Fetching daily data for {symbol}\")\n        response = daily(self.api_key, symbol, from_date, to_date)\n        return FinDataset.from_json(response)\n    except Exception as e:\n        logging.error(f\"Error fetching daily data for {symbol}: {str(e)}\")\n        raise\n</code></pre>"},{"location":"reference/quantstream_connectors/#quantstream.connectors.fmp_connector.FinancialModelingPrep.get_quote","title":"<code>get_quote(symbol)</code>","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>symbol</code> <code>_type_</code> <p>description</p> required <p>Returns:</p> Name Type Description <code>_type_</code> <p>description</p> Source code in <code>quantstream/connectors/fmp_connector.py</code> <pre><code>def get_quote(self, symbol):\n    \"\"\"_summary_\n\n    Args:\n        symbol (_type_): _description_\n\n    Returns:\n        _type_: _description_\n    \"\"\"\n    response = quote(self.api_key, symbol)\n    return response\n</code></pre>"},{"location":"reference/quantstream_core/","title":"QuantStream Core","text":""},{"location":"reference/quantstream_core/#market","title":"Market","text":"<p>A module for market data analysis and retrieval.</p>"},{"location":"reference/quantstream_core/#quantstream.core.market.Market","title":"<code>Market</code>","text":"<p>summary</p> Source code in <code>quantstream/core/market.py</code> <pre><code>class Market:\n    \"\"\"_summary_\"\"\"\n\n    def __init__(self):\n        self.data = {}\n        self.api_key = os.getenv\n</code></pre>"},{"location":"reference/quantstream_core/#portfolio","title":"Portfolio","text":""},{"location":"reference/quantstream_core/#quantstream.core.portfolio.Portfolio","title":"<code>Portfolio</code>","text":"<p>summary</p> Source code in <code>quantstream/core/portfolio.py</code> <pre><code>class Portfolio:\n    \"\"\"_summary_\"\"\"\n\n    def __init__(self):\n        self.data = xr.Dataset()\n        self.fmp = FinancialModelingPrep()\n\n    def add_security(self, symbol, from_date=None, to_date=None):\n        \"\"\"_summary_\n\n        Args:\n            symbol (_type_): _description_\n            from_date (_type_, optional): _description_. Defaults to None.\n            to_date (_type_, optional): _description_. Defaults to None.\n        \"\"\"\n        security_data = self.fmp.get_daily(symbol, from_date, to_date)\n        self.data = xr.merge(\n            [self.data, security_data.expand_dims({\"security\": [symbol]})]\n        )\n\n    def get_metric(self, metric, securities=None):\n        \"\"\"_summary_\n\n        Args:\n            metric (_type_): _description_\n            securities (_type_, optional): _description_. Defaults to None.\n\n        Returns:\n            _type_: _description_\n        \"\"\"\n        if securities:\n            return self.data[metric].sel(security=securities)\n        return self.data[metric]\n\n    def compare_technicals(self, technical, securities=None):\n        # Implement comparison logic here\n        pass\n\n    def calculate_metrics(self):\n        \"\"\"_summary_\n\n        Returns:\n            _type_: _description_\n        \"\"\"\n        # add default risk-free rate to attrs\n        self.data.attrs[\"risk_free_rate\"] = 0.02\n        self.data.attrs[\"annual_trading_days\"] = 252\n\n        self.data[\"cumulative_return\"] = xr.DataArray(\n            np.zeros(self.data[\"close\"].shape), dims=self.data[\"close\"].dims\n        )\n        self.data[\"avg_daily_return\"] = xr.DataArray(\n            np.zeros(self.data[\"close\"].shape), dims=self.data[\"close\"].dims\n        )\n        self.data[\"std_dev\"] = xr.DataArray(\n            np.zeros(self.data[\"close\"].shape), dims=self.data[\"close\"].dims\n        )\n        self.data[\"sharpe_ratio\"] = xr.DataArray(\n            np.zeros(self.data[\"close\"].shape), dims=self.data[\"close\"].dims\n        )\n        self.data[\"annualized_sharpe_ratio\"] = xr.DataArray(\n            np.zeros(self.data[\"close\"].shape), dims=self.data[\"close\"].dims\n        )\n\n        for security in self.data.security:\n            security_data = self.data.sel(security=security)\n            # TODO: Fix this calculation completely wrong\n            daily_returns = (\n                security_data[\"close\"].fillna(0) / security_data[\"close\"].shift(time=1)\n            ) - 1\n\n            cumulative_return = (1 + daily_returns).cumprod(dim=\"time\") - 1\n            cumulative_return = cumulative_return.fillna(0)\n            avg_daily_return = daily_returns.mean(dim=\"time\")\n            std_dev = daily_returns.std(dim=\"time\")\n\n            risk_free_rate = self.data.attrs[\"risk_free_rate\"]\n            annual_trading_days = self.data.attrs[\"annual_trading_days\"]\n            excess_return = avg_daily_return - (risk_free_rate / annual_trading_days)\n            sharpe_ratio = excess_return / std_dev\n            annualized_sharpe_ratio = sharpe_ratio * np.sqrt(annual_trading_days)\n\n            metrics = {\n                \"cumulative_return\": cumulative_return,\n                \"avg_daily_return\": avg_daily_return,\n                \"std_dev\": std_dev,\n                \"sharpe_ratio\": sharpe_ratio,\n                \"annualized_sharpe_ratio\": annualized_sharpe_ratio,\n            }\n\n            for metric, value in metrics.items():\n                self.data[metric].loc[{\"security\": security}] = value\n\n    def plot_cumulative_returns(self):\n        \"\"\"plot cumulative returns for each security in the portfolio\"\"\"\n        self.data[\"cumulative_return\"].plot.line(x=\"time\", hue=\"security\")\n</code></pre>"},{"location":"reference/quantstream_core/#quantstream.core.portfolio.Portfolio.add_security","title":"<code>add_security(symbol, from_date=None, to_date=None)</code>","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>symbol</code> <code>_type_</code> <p>description</p> required <code>from_date</code> <code>_type_</code> <p>description. Defaults to None.</p> <code>None</code> <code>to_date</code> <code>_type_</code> <p>description. Defaults to None.</p> <code>None</code> Source code in <code>quantstream/core/portfolio.py</code> <pre><code>def add_security(self, symbol, from_date=None, to_date=None):\n    \"\"\"_summary_\n\n    Args:\n        symbol (_type_): _description_\n        from_date (_type_, optional): _description_. Defaults to None.\n        to_date (_type_, optional): _description_. Defaults to None.\n    \"\"\"\n    security_data = self.fmp.get_daily(symbol, from_date, to_date)\n    self.data = xr.merge(\n        [self.data, security_data.expand_dims({\"security\": [symbol]})]\n    )\n</code></pre>"},{"location":"reference/quantstream_core/#quantstream.core.portfolio.Portfolio.calculate_metrics","title":"<code>calculate_metrics()</code>","text":"<p>summary</p> <p>Returns:</p> Name Type Description <code>_type_</code> <p>description</p> Source code in <code>quantstream/core/portfolio.py</code> <pre><code>def calculate_metrics(self):\n    \"\"\"_summary_\n\n    Returns:\n        _type_: _description_\n    \"\"\"\n    # add default risk-free rate to attrs\n    self.data.attrs[\"risk_free_rate\"] = 0.02\n    self.data.attrs[\"annual_trading_days\"] = 252\n\n    self.data[\"cumulative_return\"] = xr.DataArray(\n        np.zeros(self.data[\"close\"].shape), dims=self.data[\"close\"].dims\n    )\n    self.data[\"avg_daily_return\"] = xr.DataArray(\n        np.zeros(self.data[\"close\"].shape), dims=self.data[\"close\"].dims\n    )\n    self.data[\"std_dev\"] = xr.DataArray(\n        np.zeros(self.data[\"close\"].shape), dims=self.data[\"close\"].dims\n    )\n    self.data[\"sharpe_ratio\"] = xr.DataArray(\n        np.zeros(self.data[\"close\"].shape), dims=self.data[\"close\"].dims\n    )\n    self.data[\"annualized_sharpe_ratio\"] = xr.DataArray(\n        np.zeros(self.data[\"close\"].shape), dims=self.data[\"close\"].dims\n    )\n\n    for security in self.data.security:\n        security_data = self.data.sel(security=security)\n        # TODO: Fix this calculation completely wrong\n        daily_returns = (\n            security_data[\"close\"].fillna(0) / security_data[\"close\"].shift(time=1)\n        ) - 1\n\n        cumulative_return = (1 + daily_returns).cumprod(dim=\"time\") - 1\n        cumulative_return = cumulative_return.fillna(0)\n        avg_daily_return = daily_returns.mean(dim=\"time\")\n        std_dev = daily_returns.std(dim=\"time\")\n\n        risk_free_rate = self.data.attrs[\"risk_free_rate\"]\n        annual_trading_days = self.data.attrs[\"annual_trading_days\"]\n        excess_return = avg_daily_return - (risk_free_rate / annual_trading_days)\n        sharpe_ratio = excess_return / std_dev\n        annualized_sharpe_ratio = sharpe_ratio * np.sqrt(annual_trading_days)\n\n        metrics = {\n            \"cumulative_return\": cumulative_return,\n            \"avg_daily_return\": avg_daily_return,\n            \"std_dev\": std_dev,\n            \"sharpe_ratio\": sharpe_ratio,\n            \"annualized_sharpe_ratio\": annualized_sharpe_ratio,\n        }\n\n        for metric, value in metrics.items():\n            self.data[metric].loc[{\"security\": security}] = value\n</code></pre>"},{"location":"reference/quantstream_core/#quantstream.core.portfolio.Portfolio.get_metric","title":"<code>get_metric(metric, securities=None)</code>","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>metric</code> <code>_type_</code> <p>description</p> required <code>securities</code> <code>_type_</code> <p>description. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>_type_</code> <p>description</p> Source code in <code>quantstream/core/portfolio.py</code> <pre><code>def get_metric(self, metric, securities=None):\n    \"\"\"_summary_\n\n    Args:\n        metric (_type_): _description_\n        securities (_type_, optional): _description_. Defaults to None.\n\n    Returns:\n        _type_: _description_\n    \"\"\"\n    if securities:\n        return self.data[metric].sel(security=securities)\n    return self.data[metric]\n</code></pre>"},{"location":"reference/quantstream_core/#quantstream.core.portfolio.Portfolio.plot_cumulative_returns","title":"<code>plot_cumulative_returns()</code>","text":"<p>plot cumulative returns for each security in the portfolio</p> Source code in <code>quantstream/core/portfolio.py</code> <pre><code>def plot_cumulative_returns(self):\n    \"\"\"plot cumulative returns for each security in the portfolio\"\"\"\n    self.data[\"cumulative_return\"].plot.line(x=\"time\", hue=\"security\")\n</code></pre>"}]}